// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Category {
  id    String @id @default(cuid())
  name  String @unique
  tasks Task[]
}

model Task {
  id          String       @id @default(cuid())
  title       String
  description String?
  categoryId  String
  category    Category     @relation(fields: [categoryId], references: [id])
  completed   Boolean      @default(false)
  completedAt DateTime?
  reviewOn    DateTime     @default(now())
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  nextActions NextAction[]
  workDone    WorkDone[]
  userId      String
  user        User         @relation(fields: [userId], references: [id])
  priority    Boolean      @default(false)
  dueDate     DateTime?
  status      TaskStatus   @default(PENDING)
  autoComplete Boolean    @default(true)

  @@index([userId])
  @@index([categoryId])
  @@index([status])
}

model NextAction {
  id          String     @id @default(cuid())
  title       String
  completed   Boolean    @default(false)
  completedAt DateTime?
  task        Task       @relation(fields: [taskId], references: [id], onDelete: Cascade)
  taskId      String
  workDone    WorkDone[] // 1-to-many with WorkDone
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model WorkDone {
  id           String      @id @default(cuid())
  description  String
  hoursSpent   Float?
  timestamp    DateTime    @default(now())
  taskId       String?
  nextActionId String?
  task         Task?       @relation(fields: [taskId], references: [id], onDelete: Cascade)
  nextAction   NextAction? @relation(fields: [nextActionId], references: [id], onDelete: Cascade)
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
}

model User {
  id        String  @id @default(cuid())
  email     String  @unique
  firstName String
  lastName  String
  password  String?
  tasks     Task[]
}

enum TaskStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  ARCHIVED
}
